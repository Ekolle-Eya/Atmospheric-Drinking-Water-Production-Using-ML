# -*- coding: utf-8 -*-
"""Atmospheric Water Generator_Water Production Prediction Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HYxTK-Xmqb6GOoOKaZB5jd_30gHIuD8D
"""

#Import important libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import files
uploaded=files.upload()

df=pd.read_csv('AWG_Solution.csv', sep=',')
df.head()

df['Avg_Number of Houses']=df['Water Production_Day']/10
df.head()

df['Avg_Number of Houses'].dtypes

df['Avg_Number of Houses'] = df['Avg_Number of Houses'].astype(int)
print(df['Avg_Number of Houses'])
print(df['Avg_Number of Houses'].dtypes)

df.head()

#Plot scatterplot
sns.set_style('darkgrid')

fig, (ax1, ax2)=plt.subplots(1,2, figsize=(15,5))

sns.scatterplot(x='Temperature', y='Water Production_Day', ax=ax1, data=df)
sns.scatterplot(x='Humidity', y='Water Production_Day', ax=ax2, data=df)

ax1.set_title('Temperature vs Water Production')
ax2.set_title('Humidity vs Water Production')

ax1.set_xlabel('Temperature')
ax1.set_ylabel('Water Production')

ax2.set_xlabel('Humidity')
ax2.set_ylabel('Water Production')
plt.show()

#Plot regression plot
sns.set_style('darkgrid')

fig, (ax1, ax2)=plt.subplots(1,2, figsize=(15,5))

sns.regplot(x='Temperature', y='Water Production_Day', ax=ax1, data=df)
sns.regplot(x='Humidity', y='Water Production_Day', ax=ax2, data=df)

ax1.set_title('Temperature vs Water Production')
ax2.set_title('Humidity vs Water Production')

ax1.set_xlabel('Temperature')
ax1.set_ylabel('Water Production')

ax2.set_xlabel('Humidity')
ax2.set_ylabel('Water Production')
plt.show()

#Plot scatterplot
sns.set_style('darkgrid')

sns.scatterplot(x='Temperature', y='Humidity', data=df)

plt.title('Temperature vs Water Production')

plt.xlabel('Temperature')
plt.ylabel('Humidity')

plt.show()



#Using Humidity to pridict Water Production

x=df[['Humidity']]
y=df['Water Production_Day']

x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2, random_state=42)

#fit model
model=LinearRegression()
model.fit(x_train, y_train)

#prediction
water_production_pred=model.predict(x_test)
print(water_production_pred)

# Evaluate
print("\nModel Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("R² Score:", r2_score(y_test, water_production_pred))
print("MSE:", mean_squared_error(y_test, water_production_pred))

#cross validation
from sklearn.model_selection import cross_val_score
cross_val_score(model, x, y, cv=5)

#fit model
model=RandomForestRegressor()
model.fit(x_train, y_train)

#prediction
water_production_pred=model.predict(x_test)
print(water_production_pred)

#Evaluate
print("R² Score:", r2_score(y_test, water_production_pred))
print("MSE:", mean_squared_error(y_test, water_production_pred))

#Using Humidity and Temperature to pridict Water Production

x=df[['Humidity', 'Temperature']]
y=df['Water Production_Day']

x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2, random_state=42)

#fite
model=LinearRegression()
model.fit(x_train, y_train)

#prediction
water_production_pred=model.predict(x_test)
print(water_production_pred)

#Evaluate
print("\nModel Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("R² Score:", r2_score(y_test, water_production_pred))
print("MSE:", mean_squared_error(y_test, water_production_pred))

#cross validation
from sklearn.model_selection import cross_val_score
cross_val_score(model, x, y, cv=5)



